[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "Game",
        "description": "Game",
        "isExtraImport": true,
        "detail": "Game",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "kind": 5,
        "importPath": "Game.Config",
        "description": "Game.Config",
        "peekOfCode": "SCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nFPS = 60\nBACKGROUND_WIDTH = SCREEN_WIDTH\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "Game.Config",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "kind": 5,
        "importPath": "Game.Config",
        "description": "Game.Config",
        "peekOfCode": "SCREEN_HEIGHT = 600\nFPS = 60\nBACKGROUND_WIDTH = SCREEN_WIDTH\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "Game.Config",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "Game.Config",
        "description": "Game.Config",
        "peekOfCode": "FPS = 60\nBACKGROUND_WIDTH = SCREEN_WIDTH\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "Game.Config",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_WIDTH",
        "kind": 5,
        "importPath": "Game.Config",
        "description": "Game.Config",
        "peekOfCode": "BACKGROUND_WIDTH = SCREEN_WIDTH\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "Game.Config",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "Game.Config",
        "description": "Game.Config",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "Game.Config",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "Game.Config",
        "description": "Game.Config",
        "peekOfCode": "BLACK = (0, 0, 0)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "Game.Config",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "Game.Config",
        "description": "Game.Config",
        "peekOfCode": "RED = (255, 0, 0)\nGREEN = (0, 255, 0)",
        "detail": "Game.Config",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "Game.Config",
        "description": "Game.Config",
        "peekOfCode": "GREEN = (0, 255, 0)",
        "detail": "Game.Config",
        "documentation": {}
    },
    {
        "label": "Score",
        "kind": 6,
        "importPath": "Game.Sprites",
        "description": "Game.Sprites",
        "peekOfCode": "class Score(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        super().__init__()\n        self.score = 0\n        self.font = pygame.font.SysFont(None, 55)  # Moved the font initialization here\n        self.image = self.font.render(f\"Score: {self.score}\", True, WHITE)\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n    def increase_score(self, amount):\n        self.score += amount",
        "detail": "Game.Sprites",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "Game.Sprites",
        "description": "Game.Sprites",
        "peekOfCode": "class Player(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        super().__init__()\n        # Load movement images\n        self.jump_images = [pygame.transform.scale(pygame.image.load(f'Game/static/animation/player/mario_jump{i}.png'),(40,64)) for i in range(1) ]\n        self.images = [pygame.transform.scale(pygame.image.load(f'Game/static/animation/player/mario_run{i}.png'),(40,64)) for i in range(4)]\n        self.index = 0\n        self.jump_index = 0\n        self.image = self.images[self.index]\n        self.rect = self.image.get_rect()",
        "detail": "Game.Sprites",
        "documentation": {}
    },
    {
        "label": "Zombie",
        "kind": 6,
        "importPath": "Game.Sprites",
        "description": "Game.Sprites",
        "peekOfCode": "class Zombie(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        super().__init__()\n        self.images = [pygame.transform.scale(pygame.image.load(f'Game/static/animation/zombie/zombie_walk{i}.png'),(64,64)) for i in range(2)]\n        self.index = 0\n        self.image = self.images[self.index]\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n        self.velocity = 2.5  # Speed of the zombie\n        self.move_direction = 1",
        "detail": "Game.Sprites",
        "documentation": {}
    },
    {
        "label": "Platform",
        "kind": 6,
        "importPath": "Game.Sprites",
        "description": "Game.Sprites",
        "peekOfCode": "class Platform(pygame.sprite.Sprite):\n    def __init__(self, x, y, width, height):\n        super().__init__()\n        self.image = pygame.Surface((width, height))\n        self.image.fill((128, 128, 128))  # Fill with gray color\n        # Draw black border\n        pygame.draw.rect(self.image, BLACK, self.image.get_rect(), 3)  # 3 pixels for the border width\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\nclass Coin(pygame.sprite.Sprite):",
        "detail": "Game.Sprites",
        "documentation": {}
    },
    {
        "label": "Coin",
        "kind": 6,
        "importPath": "Game.Sprites",
        "description": "Game.Sprites",
        "peekOfCode": "class Coin(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        super().__init__()\n        self.images = [pygame.transform.scale(pygame.image.load(f'Game/static/animation/goldCoin/goldCoin{i}.png'),(32,32)) for i in range(8)]\n        self.index = 0\n        self.image = self.images[self.index]\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n        self.collected = False  # Flag to check if the coin has been collected\n         # Animation properties",
        "detail": "Game.Sprites",
        "documentation": {}
    }
]